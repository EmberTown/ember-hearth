const Promise = require('bluebird'),
  fs = require('fs'),
  path = require('path'),
  temp = require('temp').track(),
  cp = require('child_process');

function buildCommandScript(bin, args, projectDir) {
  var scriptContent = '',
    suffix = '.sh';

  switch (process.platform) {
    case 'win32':
      // based on npm generated bin/command.cmd
      scriptContent = `

cd /d ${projectDir}

@IF EXIST "%~dp0\\node.exe" (
  "%~dp0\\node.exe" "${bin}"  "${args.join('" "')}"
) ELSE (
  @SETLOCAL
  @SET PATHEXT=%PATHEXT:;.JS;=;%
  node  "${bin}"  "${args.join('"  "')}"
)
`;
      suffix = '.cmd';
      break;
    case 'darwin':
    case 'linux':
      //TODO: check if freebsd and sunos have sh working out of the box
    //case 'freebsd':
    //case 'sunos':
      scriptContent = `
#!/usr/bin/env sh

# generated by ember-hearth

cd ${projectDir};
${bin} ${args.join(' ')};

echo "Press any key to close the terminal...";
read
`;
      break;
  }

  return new Promise((resolve, reject) => {
    temp.open({prefix: 'hearth-cmd', suffix: suffix}, function (err, info) {
      if (!err) {
        fs.write(info.fd, scriptContent);
        fs.close(info.fd, function (err) {
          if (err) {
            reject(err);
          } else {
            resolve(info.path);
          }
        });
      } else {
        reject(err);
      }
    });
  });
}

function buildTermLaunchCommand(scriptPath) {
  //TODO: provide a user config where setting a terminal is supported
  switch (process.platform) {
    case 'darwin':
      // TODO: check if this works on osx
      return ['osascript', ['-e', `tell app "Terminal" to do script "${scriptPath}"`]];
    case 'linux':
      return ['/usr/bin/xterm', ['-e', `bash ${scriptPath}`]];
    case 'win32':
      // start cmd.exe with command (using `start` directly won't work)
      return [process.env.ComSpec, ['/C', `start ${process.env.ComSpec} /C ${scriptPath}`]];
    default:
      break;
  }
}

function launchTermCommand(bin, args, spawnOptions) {
  return buildCommandScript(bin, args, spawnOptions.cwd)
    .then(scriptPath => cp.spawn.apply(cp, buildTermLaunchCommand(scriptPath), spawnOptions));
}

exports.launchTermCommand = launchTermCommand;
exports.buildTermLaunchCommand = buildTermLaunchCommand;
exports.buildCommandScript = buildCommandScript;
